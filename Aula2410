Programa Principal
using System;
using System.Globalization;
using System.Collections.Generic;

namespace Empresa1710.Entidade
{
    class Program
    {
        static void Main(string[] args)
        {
            List<Funcionario> list = new List<Funcionario>();

            Console.Write("Entre o numero de funcionarios:");
                int n = int.Parse(Console.ReadLine());
            for(int i = 1; i <= n; i++)
            {
                Console.WriteLine($"Funcionario # {i} data:");
                Console.Write("Tercerizado (y/n)?");
                char ch = char.Parse(Console.ReadLine());
                Console.Write("Nome:");
                String Nome = Console.ReadLine();
                Console.Write("Horas:");
                int Horas = int.Parse(Console.ReadLine());
                Console.Write("Valor por Horas:");
                double valorPorHoras = double.Parse(Console.ReadLine(), CultureInfo.InvariantCulture);
                if (ch == 'y');
            }
        }
        
    }
}


Classe

using System;
using System.Collections.Generic;
using System.Text;

namespace Empresa1710
{
    class Funcionario
    {
        public string Nome { get; set; }
        public int Horas { get; set; }
        public double Valor_Por_Hora { get; set; }
        public Funcionario(){}
        public Funcionario(string nome, int horas, double valor_por_hora)
        
        {
            Nome = nome;
            Horas = horas;
            Valor_Por_Hora = valor_por_hora; 
        }
        public virtual double Pagamento()
        {
            return Horas * Valor_Por_Hora;
        }
    }
}
    

SubClasse

using System;
using System.Collections.Generic;
using System.Text;

namespace Empresa1710.Entidade
{
    class FuncionarioTerceirizado : Funcionario
    {
        public double DespesaAdicional { get; set; }
        public FuncionarioTerceirizado(){}
        public FuncionarioTerceirizado(string nome, int horas, double valor_por_hora, double despesaadicional) 
        :base(nome, horas, valor_por_hora)
        {
            DespesaAdicional = despesaadicional;
        }
        public override double Pagamento()
        {
            return base.Pagamento() + 1.1 * DespesaAdicional;
        }
    }
}


